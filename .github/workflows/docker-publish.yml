name: 构建并推送Docker镜像到GitHub Packages

on:
  # 当推送版本标签时触发
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  
  # 允许手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: '自定义镜像标签'
        required: false
        default: 'manual'
        type: string
      enable_signing:
        description: '启用镜像签名'
        required: false
        default: false
        type: boolean

env:
  # 使用GitHub Container Registry
  REGISTRY: ghcr.io
  # 镜像名称将使用仓库名称
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # 这用于完成身份挑战
      # 与sigstore/fulcio结合使用时...
      id-token: write

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录到Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据 (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # 手动触发时使用输入的标签
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag != '' }}
          # 手动触发默认标签
          type=raw,value=manual-{{sha}},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag == '' }}
          # 版本标签
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        labels: |
          org.opencontainers.image.title=评论系统后端
          org.opencontainers.image.description=为静态博客提供评论功能的FastAPI后端服务
          org.opencontainers.image.vendor=YunHai
          org.opencontainers.image.url=https://www.yhnotes.com

    - name: 构建并推送Docker镜像
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}